apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples: |-
      [
        {
          "apiVersion": "stackgres.io/v1",
          "kind": "SGBackup",
          "metadata": {
            "name": "demo-backup",
            "namespace": "demo-db"
          },
          "spec": {
            "managedLifecycle": false,
            "sgCluster": "demo-db"
          }
        },
        {
          "apiVersion": "stackgres.io/v1",
          "kind": "SGCluster",
          "metadata": {
            "name": "demo-db",
            "namespace": "demo-db"
          },
          "spec": {
            "instances": 3,
            "pods": {
              "persistentVolume": {
                "size": "20Gi"
              }
            },
            "postgres": {
              "version": "latest"
            }
          }
        },
        {
          "apiVersion": "stackgres.io/v1",
          "kind": "SGConfig",
          "metadata": {
            "name": "stackgres-operator"
          },
          "spec": {
            "adminui": {
              "image": {
                "pullPolicy": "IfNotPresent"
              },
              "name": "stackgres-adminui",
              "resources": {},
              "service": {
                "exposeHTTP": false,
                "type": "ClusterIP"
              }
            },
            "authentication": {
              "oidc": {},
              "resetPassword": false,
              "secretRef": {
                "name": ""
              },
              "type": "jwt",
              "user": "admin"
            },
            "cert": {
              "autoapprove": true,
              "certManager": {
                "autoConfigure": false,
                "duration": "2160h",
                "encoding": "PKCS1",
                "renewBefore": "360h",
                "size": 2048
              },
              "createForOperator": true,
              "createForWebApi": true,
              "crt": null,
              "jwtRsaKey": null,
              "jwtRsaPub": null,
              "key": null,
              "resetCerts": false,
              "webCrt": null,
              "webKey": null
            },
            "containerRegistry": "quay.io",
            "deploy": {
              "operator": true,
              "restapi": true
            },
            "developer": {},
            "extensions": {
              "cache": {
                "enabled": false,
                "persistentVolume": {
                  "size": "1Gi"
                },
                "preloadedExtensions": [
                  "x86_64/linux/timescaledb-1\\.7\\.4-pg12"
                ]
              },
              "repositoryUrls": [
                "https://extensions.stackgres.io/postgres/repository"
              ]
            },
            "grafana": {
              "autoEmbed": false,
              "datasourceName": "Prometheus",
              "password": "prom-operator",
              "schema": "http",
              "user": "admin"
            },
            "imagePullPolicy": "IfNotPresent",
            "initClusterRole": "cluster-admin",
            "jobs": {
              "affinity": {},
              "annotations": {},
              "image": {
                "pullPolicy": "IfNotPresent"
              },
              "name": "stackgres-jobs",
              "nodeSelector": {},
              "resources": {},
              "tolerations": []
            },
            "operator": {
              "affinity": {},
              "annotations": {},
              "image": {
                "pullPolicy": "IfNotPresent"
              },
              "nodeSelector": {},
              "resources": {},
              "service": {
                "annotations": {}
              },
              "serviceAccount": {
                "annotations": {}
              },
              "tolerations": []
            },
            "prometheus": {
              "allowAutobind": true
            },
            "rbac": {
              "create": true
            },
            "restapi": {
              "affinity": {},
              "annotations": {},
              "image": {
                "pullPolicy": "IfNotPresent"
              },
              "name": "stackgres-restapi",
              "nodeSelector": {},
              "resources": {},
              "service": {
                "annotations": {}
              },
              "serviceAccount": {
                "annotations": {}
              },
              "tolerations": []
            },
            "serviceAccount": {
              "create": true
            }
          }
        },
        {
          "apiVersion": "stackgres.io/v1",
          "kind": "SGDbOps",
          "metadata": {
            "name": "demo-restart-op",
            "namespace": "demo-db"
          },
          "spec": {
            "op": "restart",
            "sgCluster": "demo-db"
          }
        },
        {
          "apiVersion": "stackgres.io/v1",
          "kind": "SGDistributedLogs",
          "metadata": {
            "name": "distributedlogs",
            "namespace": "demo-db"
          },
          "spec": {
            "persistentVolume": {
              "size": "20Gi"
            }
          }
        },
        {
          "apiVersion": "stackgres.io/v1",
          "kind": "SGInstanceProfile",
          "metadata": {
            "name": "size-m",
            "namespace": "demo-db"
          },
          "spec": {
            "cpu": "4",
            "memory": "8Gi"
          }
        },
        {
          "apiVersion": "stackgres.io/v1",
          "kind": "SGPoolingConfig",
          "metadata": {
            "name": "poolconfig",
            "namespace": "demo-db"
          },
          "spec": {
            "pgBouncer": {
              "pgbouncer.ini": {
                "databases": {
                  "demo": {
                    "dbname": "demo",
                    "pool_size": 400,
                    "reserve_pool": 5
                  },
                  "postgres": {
                    "dbname": "postgres",
                    "pool_size": 10,
                    "reserve_pool": 5
                  }
                },
                "pgbouncer": {
                  "default_pool_size": "100",
                  "max_client_conn": "2000",
                  "pool_mode": "session"
                }
              }
            }
          }
        },
        {
          "apiVersion": "stackgres.io/v1",
          "kind": "SGPostgresConfig",
          "metadata": {
            "name": "pgconfig",
            "namespace": "demo-db"
          },
          "spec": {
            "postgresVersion": "15",
            "postgresql.conf": {
              "effective_cache_size": "5GB",
              "hot_standby_feedback": "on",
              "log_min_duration_statement": "1000",
              "maintenance_work_mem": "2GB",
              "max_connections": "600",
              "shared_buffers": "3GB",
              "work_mem": "16MB"
            }
          }
        },
        {
          "apiVersion": "stackgres.io/v1",
          "kind": "SGScript",
          "metadata": {
            "name": "create-db-script",
            "namespace": "demo-db"
          },
          "spec": {
            "continueOnError": false,
            "managedVersions": true,
            "scripts": [
              {
                "name": "create-demo-database",
                "script": "CREATE DATABASE demo WITH OWNER postgres;\n"
              }
            ]
          }
        },
        {
          "apiVersion": "stackgres.io/v1beta1",
          "kind": "SGObjectStorage",
          "metadata": {
            "name": "backupconfig",
            "namespace": "demo-db"
          },
          "spec": {
            "gcs": {
              "bucket": "stackgres-backups",
              "gcpCredentials": {
                "secretKeySelectors": {
                  "serviceAccountJSON": {
                    "key": "gcloudkey",
                    "name": "backups-gcp"
                  }
                }
              }
            },
            "type": "gcs"
          }
        },
        {
          "apiVersion": "stackgres.io/v1alpha1",
          "kind": "SGShardedCluster",
          "metadata": {
            "namespace": "demo-db",
            "name": "demo-shardeddb"
          },
          "spec": {
            "type": "citus",
            "database": "sharded",
            "postgres": {
              "version": "15.3"
            },
            "coordinator": {
              "instances": 2,
              "pods": {
                "persistentVolume": {
                  "size": "10Gi"
                }
              }
            },
            "shards": {
              "clusters": 3,
              "instancesPerCluster": 2,
              "pods": {
                "persistentVolume": {
                  "size": "10Gi"
                }
              }
            }
          }
        }
      ]
    capabilities: Deep Insights
    categories: Database
    containerImage: quay.io/stackgres/operator:1.5.0
    createdAt: "2023-07-03T14:34:52Z"
    description: |
      The most advanced Postgres Enterprise Platform.
      Fully Open Source.
    olm.skipRange: <1.5.0
    operatorhub.io/ui-metadata-max-k8s-version: 1.27.999
    operators.operatorframework.io/builder: operator-sdk-v1.29.0
    operators.operatorframework.io/project_layout: helm.sdk.operatorframework.io/v1
    repository: https://gitlab.com/ongresinc/stackgres
  name: stackgres.v1.5.0
  namespace: placeholder
spec:
  apiservicedefinitions: {}
  customresourcedefinitions:
    owned:
    - description: Handle to a performed (or to be performed, if run manually) backup
      displayName: StackGres Backup
      kind: SGBackup
      name: sgbackups.stackgres.io
      version: v1
    - description: Main CRD, manages Postgres clusters (one or more Postgres pods)
      displayName: StackGres Cluster
      kind: SGCluster
      name: sgclusters.stackgres.io
      version: v1
    - description: Operator configuration for OLM-based installations (equivalent
        to values.yaml with Helm)
      displayName: StackGres Operator Configuration
      kind: SGConfig
      name: sgconfigs.stackgres.io
      version: v1
    - description: Day 2 Operations, including upgrades, restarts, vacuum, repack,
        etc
      displayName: StackGres Database Operation
      kind: SGDbOps
      name: sgdbops.stackgres.io
      version: v1
    - description: Multi-tenant logs server, to aggregate Postgres logs. Fully managed
      displayName: StackGres Distributed Logs
      kind: SGDistributedLogs
      name: sgdistributedlogs.stackgres.io
      version: v1
    - description: Instance Profiles are like "t-shirt" sizes, used for pods sizing
      displayName: StackGres Instance Profile
      kind: SGInstanceProfile
      name: sginstanceprofiles.stackgres.io
      version: v1
    - description: Handle to an existing Object Storage (e.g. S3), used to store backups
      displayName: StackGres Object Storage
      kind: SGObjectStorage
      name: sgobjectstorages.stackgres.io
      version: v1beta1
    - description: Strongly validated customized Postgres configuration (postgresql.conf)
      displayName: StackGres Postgres Configuration
      kind: SGPostgresConfig
      name: sgpgconfigs.stackgres.io
      version: v1
    - description: Customized PgBouncer (connection pooler) configuration
      displayName: StackGres Connection Pooling Configuration
      kind: SGPoolingConfig
      name: sgpoolconfigs.stackgres.io
      version: v1
    - description: Managed SQL Scripts, used for initial SQL commands or migrations
      displayName: StackGres Script
      kind: SGScript
      name: sgscripts.stackgres.io
      version: v1
    - description: Manages Postgres sharded clusters (two or more SGClusters)
      displayName: StackGres Sharded Cluster
      kind: SGShardedCluster
      name: sgshardedclusters.stackgres.io
      version: v1alpha1
  description: |2

    [StackGres](https://stackgres.io) is the **Stack** required for enterprise production Post**Gres**. A fully-featured platform to run Postgres on Kubernetes. Fully Open Source, StackGres supports both a declarative approach suitable for GitOps workflows and a complete Web Console for the best user experience.

    Built by [OnGres](https://ongres.com) ("**On** Post**Gres**"), StackGres requires little to no prior Postgres experience. StackGres can perform fully automated deployments; fully automated database operations ("Day 2 operations") and comes with advanced database tuning by default. Yet remaining highly customizable for Postgres expert DBAs.

    [StackGres features](https://stackgres.io/features/) include, among others:

    * **High Availability with automated failover**. StackGres relies on [Patroni](https://github.com/zalando/patroni), and its built-in and fully automatic.
    * **Integrated connection pooling**. Built-in, by default, like it should be for production workloads.
    * **Automatic backups with lifecycle policies**. Backup your clusters automatically to any object store. Apply retention policies. Restoration supports PITR.
    * **Advanced replication modes**, including async, sync and group replication. It also supports cascading replication and standby clusters on separate Kubernetes clusters for disaster recovery.
    * **More than 150 Postgres extensions**. The Postgres platform with [the largest number of extensions in the world](https://stackgres.io/extensions/). With new extensions added continuously.
    * **Observability**. Fully integrated with the Prometheus stack. Includes pre-defined, Postgres-specific dashboards and alerts.
    * **Fully-featured Web Console**. Perform any operation from the Web Console. Supports SSO, fine-grained RBAC and a REST API.
    * **Distributed Logs**. StackGres developed a mechanism to ship logs from all pods to a central log server, managed by StackGres, that store logs in Postgres. Query your logs with SQL or from the Web Console!
    * **Automated Day 2 Operations**. Minor and major version upgrades, container upgrades, controlled restart, vacuum, repack, even benchmarks!
    * **Expertly tuned by default**. From the creators of [CONF](https://postgresqlco.nf), StackGres pre-tunes your Postgres servers with more than 40 parameters tuned by default.
    * **100% Open Source**. No "premium version with advanced features", no production usage restrictions. Just Open Source.
    * **[24/7 Support](https://stackgres.io/pricing/) Available from OnGres**


    ## Installation and documentation

    Installation:
    * For a quick test, you can follow our [quickstart](https://stackgres.io/doc/latest/demo/quickstart/).
    * [Production installations](https://stackgres.io/doc/latest/install/).

    All the documentation is available at [stackgres.io/doc](https://stackgres.io/doc/latest/install/).

    Join the [Slack](https://slack.stackgres.io) and/or [Discord](https://discord.stackgres.io) Public Communities for Community support.
  displayName: StackGres
  icon:
  - base64data: |
      PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCA1MDAg
      NTAwIiBzdHlsZT0iZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCA1MDAgNTAwIiB4bWw6c3BhY2U9
      InByZXNlcnZlIj4KICAgIDxzd2l0Y2g+CiAgICAgICAgPGc+CiAgICAgICAgICAgIDxwYXRoIHN0
      eWxlPSJmaWxsOiM0MmE4YzgiIGQ9Im01LjIgMjczLjcgMTEwLjcgMTI2LjhoMjY4LjJsMTEwLjct
      MTI2LjgtMTEwLjctMTI2LjhIMTE1Ljl6Ii8+CiAgICAgICAgICAgIDxwYXRoIHN0eWxlPSJmaWxs
      OiM0MjZkODgiIGQ9Ik0xMTUuOSA0MDAuNWgyNjguNHY1Ni40SDExNS45eiIvPgogICAgICAgICAg
      ICA8cGF0aCBzdHlsZT0iZmlsbDojNDI4YmI0IiBkPSJNMTE1LjkgNDU2LjggNS4yIDMzMHYtNTYu
      M2wxMTAuNyAxMjYuOHoiLz4KICAgICAgICAgICAgPHBhdGggc3R5bGU9ImZpbGw6IzE2NjU3YyIg
      ZD0iTTM4NC4xIDQ1Ni44IDQ5NC44IDMzMHYtNTYuM0wzODQuMSA0MDAuNXoiLz4KICAgICAgICAg
      ICAgPHBhdGggZD0iTTQ2NS43IDI1My40YzAtNDctOTYuNi04NS4yLTIxNS43LTg1LjJTMzQuNCAy
      MDYuMyAzNC40IDI1My40czk2LjUgODUuMiAyMTUuNiA4NS4yIDIxNS43LTM4LjIgMjE1LjctODUu
      MnoiIHN0eWxlPSJmaWxsOiMzOWI1NGEiLz4KICAgICAgICAgICAgPHBhdGggZD0iTTQ2NS43IDI1
      My40YzAgNDctOTYuNiA4NS4yLTIxNS43IDg1LjJTMzQuNCAzMDAuNCAzNC40IDI1My40djQ2Ljlj
      MTQuOSA0MS4zIDEwNi41IDg1LjIgMjE1LjYgODUuMnMyMDAuOC00My45IDIxNS43LTg1LjJ2LTQ2
      Ljl6IiBzdHlsZT0iZmlsbDojMDA5MjQ1Ii8+CiAgICAgICAgICAgIDxwYXRoIHN0eWxlPSJmaWxs
      OiNmMmM2M2YiIGQ9Ik0xNi4zIDE3OC42IDI1MCAzMTQuMWwyMzMuOC0xMzUuNUwyNTAgNDMuMnoi
      Lz4KICAgICAgICAgICAgPHBhdGggc3R5bGU9ImZpbGw6I2YyYjEzNiIgZD0iTTE2LjMgMTc4LjZ2
      NTIuOEwyNTAgMzY2Ljl2LTUyLjh6Ii8+CiAgICAgICAgICAgIDxwYXRoIHN0eWxlPSJmaWxsOiNm
      MmExMzAiIGQ9Ik00ODMuOCAxNzguNiAyNTAgMzE0LjF2NTIuOGwyMzMuOC0xMzUuNXoiLz4KICAg
      ICAgICAgICAgPHBhdGggc3R5bGU9ImZpbGw6I2ZmNzEyNCIgZD0ibTY4IDIxMi40IDM2NC4xLTUz
      LTkyLjQtMTA2eiIvPgogICAgICAgICAgICA8cGF0aCBzdHlsZT0iZmlsbDojZDkzZDFiIiBkPSJt
      NjggMjEyLjQgMzY0LjEtNTN2NDcuOEw2OCAyNjAuMXoiLz4KICAgICAgICA8L2c+CiAgICA8L3N3
      aXRjaD4KPC9zdmc+Cg==
    mediatype: image/svg+xml
  install:
    spec:
      clusterPermissions:
      - rules:
        - apiGroups:
          - ""
          resources:
          - namespaces
          verbs:
          - get
          - create
        - apiGroups:
          - ""
          resources:
          - secrets
          verbs:
          - '*'
        - apiGroups:
          - ""
          resources:
          - events
          verbs:
          - create
        - apiGroups:
          - operators.coreos.com
          resources:
          - operators
          verbs:
          - get
          - list
        - apiGroups:
          - stackgres.io
          resources:
          - sgconfigs
          - sgconfigs/status
          - sgconfigs/finalizers
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - rbac.authorization.k8s.io
          resources:
          - clusterrolebindings
          - clusterroles
          verbs:
          - '*'
        - apiGroups:
          - ""
          resources:
          - configmaps
          - secrets
          - serviceaccounts
          - services
          verbs:
          - '*'
        - apiGroups:
          - apps
          resources:
          - deployments
          verbs:
          - '*'
        - apiGroups:
          - batch
          resources:
          - jobs
          verbs:
          - '*'
        - apiGroups:
          - certificates.k8s.io
          resources:
          - certificatesigningrequests
          verbs:
          - list
        - apiGroups:
          - certificates.k8s.io
          resourceNames:
          - stackgres-operator
          resources:
          - certificatesigningrequests
          verbs:
          - create
          - get
          - list
          - watch
          - delete
        - apiGroups:
          - certificates.k8s.io
          resources:
          - certificatesigningrequests/approval
          verbs:
          - update
        - apiGroups:
          - certificates.k8s.io
          resourceNames:
          - stackgres-operator.stackgres/*
          resources:
          - signers
          verbs:
          - approve
        - apiGroups:
          - admissionregistration.k8s.io
          resourceNames:
          - stackgres-operator
          resources:
          - mutatingwebhookconfigurations
          - validatingwebhookconfigurations
          verbs:
          - '*'
        - apiGroups:
          - apiextensions.k8s.io
          resources:
          - customresourcedefinitions
          verbs:
          - list
        - apiGroups:
          - apiextensions.k8s.io
          resourceNames:
          - sgbackupconfigs.stackgres.io
          - sgbackups.stackgres.io
          - sgclusters.stackgres.io
          - sgdbops.stackgres.io
          - sgdistributedlogs.stackgres.io
          - sginstanceprofiles.stackgres.io
          - sgobjectstorages.stackgres.io
          - sgpgconfigs.stackgres.io
          - sgpoolconfigs.stackgres.io
          - sgscripts.stackgres.io
          resources:
          - customresourcedefinitions
          verbs:
          - list
          - get
          - watch
          - create
          - patch
          - update
        - apiGroups:
          - stackgres.io
          resources:
          - sgbackupconfigs
          - sgbackups
          - sgclusters
          - sgdbops
          - sgdistributedlogs
          - sginstanceprofiles
          - sgobjectstorages
          - sgpgconfigs
          - sgpoolconfigs
          - sgscripts
          verbs:
          - '*'
        - apiGroups:
          - admissionregistration.k8s.io
          resourceNames:
          - stackgres
          resources:
          - mutatingwebhookconfigurations
          - validatingwebhookconfigurations
          verbs:
          - delete
        - apiGroups:
          - certificates.k8s.io
          resourceNames:
          - stackgres
          resources:
          - certificatesigningrequests
          verbs:
          - delete
        - apiGroups:
          - authentication.k8s.io
          resources:
          - tokenreviews
          verbs:
          - create
        - apiGroups:
          - authorization.k8s.io
          resources:
          - subjectaccessreviews
          verbs:
          - create
        serviceAccountName: stackgres-helm-controller-manager
      deployments:
      - label:
          app: stackgres-helm-controller-manager
          app.kubernetes.io/component: manager
          app.kubernetes.io/created-by: stackgres
          app.kubernetes.io/instance: controller-manager
          app.kubernetes.io/managed-by: kustomize
          app.kubernetes.io/name: deployment
          app.kubernetes.io/part-of: stackgres
        name: stackgres-helm-controller-manager
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: stackgres-helm-controller-manager
          strategy: {}
          template:
            metadata:
              annotations:
                kubectl.kubernetes.io/default-container: manager
              labels:
                app: stackgres-helm-controller-manager
            spec:
              affinity:
                nodeAffinity:
                  requiredDuringSchedulingIgnoredDuringExecution:
                    nodeSelectorTerms:
                    - matchExpressions:
                      - key: kubernetes.io/arch
                        operator: In
                        values:
                        - amd64
                        - arm64
                        - ppc64le
                        - s390x
                      - key: kubernetes.io/os
                        operator: In
                        values:
                        - linux
              containers:
              - args:
                - --secure-listen-address=0.0.0.0:8443
                - --upstream=http://127.0.0.1:8080/
                - --logtostderr=true
                - --v=0
                image: gcr.io/kubebuilder/kube-rbac-proxy@sha256:d99a8d144816b951a67648c12c0b988936ccd25cf3754f3cd85ab8c01592248f
                name: kube-rbac-proxy
                ports:
                - containerPort: 8443
                  name: https
                  protocol: TCP
                resources:
                  limits:
                    cpu: "1"
                    memory: 256Mi
                  requests:
                    cpu: 5m
                    memory: 128Mi
                securityContext:
                  allowPrivilegeEscalation: false
                  capabilities:
                    drop:
                    - ALL
              - args:
                - --health-probe-bind-address=:8081
                - --metrics-bind-address=127.0.0.1:8080
                - --leader-elect
                - --leader-election-id=stackgres
                - --max-concurrent-reconciles=1
                - --reconcile-period=1000000h
                image: quay.io/stackgres/helm-operator@sha256:2eefc1b4f4fe11e53c6aab7dbfa90be223e74cd505be20ae6e9c71266846c6d2
                imagePullPolicy: IfNotPresent
                livenessProbe:
                  httpGet:
                    path: /healthz
                    port: 8081
                  initialDelaySeconds: 15
                  periodSeconds: 20
                name: manager
                readinessProbe:
                  httpGet:
                    path: /readyz
                    port: 8081
                  initialDelaySeconds: 5
                  periodSeconds: 10
                resources:
                  limits:
                    cpu: "1"
                    memory: 512Mi
                  requests:
                    cpu: 10m
                    memory: 128Mi
                securityContext:
                  allowPrivilegeEscalation: false
                  capabilities:
                    drop:
                    - ALL
              - command:
                - sh
                - -exc
                - |
                  # TODO: Remove this as soon as version 1.4 get out of support!
                  PREVIOUS_SGCONFIG="$(kubectl get sgconfig stackgres -o yaml || true)"
                  if [ "x" = "x$SGCONFIG" ]             && [ "x" != "x$PREVIOUS_SGCONFIG" ]
                  then
                    SGCONFIG="$PREVIOUS_SGCONFIG"
                  fi

                  SGCONFIG_SPEC=""
                  if [ "x" != "x$SGCONFIG" ]
                  then
                    if ! SGCONFIG="$(printf %s "$SGCONFIG" | kubectl create -f - --dry-run=client -o yaml)"
                    then
                      printf "Please set a correct value for SGCONFIG env var in Subscription since the following is invalid:\n\n%s\n" "$SGCONFIG"
                      exit 1
                    fi
                    if printf %s "$SGCONFIG" | grep -q '^spec:$'
                    then
                      echo "Found SGConfig spec"
                      SGCONFIG_SPEC_LINE="$(printf %s "$SGCONFIG"                 | grep -n '^spec:$' | cut -d : -f 1)"
                      SGCONFIG_AFTER_SPEC_LINE="$(printf %s "$SGCONFIG"                 | tail -n +"$((SGCONFIG_SPEC_LINE + 1))"                 | grep -n '^[^ #].*$' | cut -d : -f 1)"
                      if [ x != "x$SGCONFIG_AFTER_SPEC_LINE" ]
                      then
                        SGCONFIG_SPEC="$(printf %s "$SGCONFIG"                   | head -n "$((SGCONFIG_SPEC_LINE + SGCONFIG_AFTER_SPEC_LINE - 1))"                   | tail -n +"$((SGCONFIG_AFTER_SPEC_LINE - 1))")"
                      else
                        SGCONFIG_SPEC="$(printf %s "$SGCONFIG"                   | tail -n +"$((SGCONFIG_SPEC_LINE + 1))")"
                      fi
                    else
                      echo "Found SGConfig without spec, ignoring!"
                    fi
                  fi

                  # TODO: Remove this as soon as version 1.4 get out of support!
                  kubectl delete --ignore-not-found sgconfig stackgres
                  kubectl delete --ignore-not-found clusterrole stackgres
                  kubectl delete --ignore-not-found clusterrole stackgres-restapi
                  kubectl delete --ignore-not-found clusterrolebinding stackgres
                  kubectl delete --ignore-not-found clusterrolebinding stackgres-restapi
                  kubectl delete --ignore-not-found clusterrolebinding stackgres-restapi-admin
                  kubectl delete --ignore-not-found validatingwebhookconfiguration stackgres
                  kubectl delete --ignore-not-found mutatingwebhookconfiguration stackgres
                  kubectl delete --ignore-not-found secret stackgres-certs
                  kubectl delete --ignore-not-found secret stackgres-web-certs
                  kubectl delete --ignore-not-found deployment -l olm.owner=stackgres.v1.4.3

                  OPERATOR_NAME="$(kubectl get operators.operators.coreos.com -o name             | grep '^operator.operators.coreos.com/stackgres'             | head -n 1 | cut -d / -f 2)"
                  test -n "$OPERATOR_NAME"
                  OPERATOR_UID="$(kubectl get operators.operators.coreos.com "$OPERATOR_NAME" --template '{{ .metadata.uid }}')"
                  test -n "$OPERATOR_UID"

                  cat << EOF | kubectl apply -f -
                  apiVersion: stackgres.io/v1
                  kind: SGConfig
                  metadata:
                    name: stackgres-operator
                  spec:
                  $SGCONFIG_SPEC
                    clusterOwnerReferences:
                    - apiVersion: operators.coreos.com/v1
                      kind: Operator
                      name: $OPERATOR_NAME
                      uid: $OPERATOR_UID
                  EOF
                image: quay.io/ongres/kubectl@sha256:20ba4329217b11c82ff8665c1f81599a75f8d4319e9546b6fd6ec86a12608914
                imagePullPolicy: IfNotPresent
                name: default
                resources:
                  limits:
                    cpu: "1"
                    memory: 512Mi
                  requests:
                    cpu: 10m
                    memory: 8Mi
                securityContext:
                  allowPrivilegeEscalation: false
                  capabilities:
                    drop:
                    - ALL
                  runAsGroup: 1000
                  runAsNonRoot: true
                  runAsUser: 1000
              securityContext:
                runAsNonRoot: true
              serviceAccountName: stackgres-helm-controller-manager
              terminationGracePeriodSeconds: 10
      permissions:
      - rules:
        - apiGroups:
          - ""
          resources:
          - configmaps
          verbs:
          - get
          - list
          - watch
          - create
          - update
          - patch
          - delete
        - apiGroups:
          - coordination.k8s.io
          resources:
          - leases
          verbs:
          - get
          - list
          - watch
          - create
          - update
          - patch
          - delete
        - apiGroups:
          - ""
          resources:
          - events
          verbs:
          - create
          - patch
        serviceAccountName: stackgres-helm-controller-manager
    strategy: deployment
  installModes:
  - supported: false
    type: OwnNamespace
  - supported: false
    type: SingleNamespace
  - supported: false
    type: MultiNamespace
  - supported: true
    type: AllNamespaces
  keywords:
  - postgresql
  - postgres
  - database
  - sql
  - rdbms
  - open source
  - ongres
  links:
  - name: StackGres Web
    url: https://stackgres.io
  - name: StackGres Docs
    url: https://stackgres.io/doc
  maintainers:
  - email: stackgres@ongres.com
    name: OnGres
  maturity: stable
  minKubeVersion: 1.18.0
  provider:
    name: OnGres
    url: https://ongres.com
  version: 1.5.0
  relatedImages:
    - name: kubectl_1_25_5
      image: ongres/kubectl@sha256:20ba4329217b11c82ff8665c1f81599a75f8d4319e9546b6fd6ec86a12608914
    - name: kube-rbac-proxy_0_13_0
      image: gcr.io/kubebuilder/kube-rbac-proxy@sha256:d99a8d144816b951a67648c12c0b988936ccd25cf3754f3cd85ab8c01592248f
    - name: stackgres-operator-helm
      image: quay.io/stackgres/helm-operator@sha256:0aa3d687f6e5998a01d536127242d9c58703e1d52b786c53bb46837600aca375
    - name: stackgres-operator
      image: quay.io/stackgres/operator@sha256:43876bbbe5382498c94b6db81dbc2c41319512336bba13842b51409b9cebc00a
    - name: stackgres-restapi
      image: quay.io/stackgres/restapi@sha256:deef1c04212b01b2fb79e9fdc5307b18829ab373fe59032b1ced5dc798e60902
    - name: stackgres-admin-ui
      image: quay.io/stackgres/admin-ui@sha256:bb32025efbdb320c7af5a60332caa0ccc5c2750950411dacdcdd4ddd6cd37a26
    - name: stackgres-jobs
      image: quay.io/stackgres/jobs@sha256:640eeec797968f42006ae276f84d3de7603e7d7c81501c3e54613d8bb2b2b7bf
